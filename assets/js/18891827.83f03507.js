"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[235],{3829:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"overview","title":"Overview","description":"This page shows you the overview of the WeatherStack project, including the core features, an overview of how it works, and some little diagrams.","source":"@site/docs/overview.mdx","sourceDirName":".","slug":"/overview","permalink":"/docs/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/overview.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Overview","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/docs/getting-started"},"next":{"title":"Supported sensors","permalink":"/docs/supported-sensors/"}}');var n=a(4848),r=a(8453);const s={title:"Overview",sidebar_position:1},i=void 0,c={},d=[{value:"WeatherStack Core",id:"weatherstack-core",level:2},{value:"WeatherStack Edge",id:"weatherstack-edge",level:2},{value:"WeatherStack Frontend",id:"weatherstack-frontend",level:2}];function h(e){const t={a:"a",admonition:"admonition",h2:"h2",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["This page shows you the overview of the WeatherStack project, including the core features, an overview of how it works, and some little diagrams.\nThere are 3 main components to WeatherStack, which are the ",(0,n.jsx)(t.strong,{children:"Backend/Core"}),", ",(0,n.jsx)(t.strong,{children:"Edge devices (Nodes & Sensors)"}),", and ",(0,n.jsx)(t.strong,{children:"Frontend"}),'.\nThese are called "WeatherStack Core", "WeatherStack Edge", and "WeatherStack Frontend" respectively.']}),"\n",(0,n.jsx)(t.h2,{id:"weatherstack-core",children:"WeatherStack Core"}),"\n",(0,n.jsx)(t.p,{children:"The core of WeatherStack is the backend, which is responsible for processing data from the edge devices, storing it, and providing an API for the frontend to use.\nIt's built using TypeScript (Deno), PostgreSQL, and a few other little bits, like C# for processing the data into things like timelapses, or reports that you can download."}),"\n",(0,n.jsx)(t.p,{children:"This is desgined to run on a dedicated server, specficially a Raspberry Pi 4 or higher. It's best to have this running on your local network for fast data transfer between the edge devices and the core.\nIt is however available to run as a Docker container, but it may severely limit it's performance, and may not be able to handle the data as well as a dedicated server."}),"\n",(0,n.jsx)(t.p,{children:"It is suggested to have an external storage device connected to the server, such as a USB drive or an external hard drive, to store the data that is collected by the edge devices.\nSince it runs on Linux, it's fairly easy to set up a NAS (Network Attached Storage) to store the data, which can be accessed by the frontend and other devices on the network,\nthough it is not recommended as it may slow down the performance of the core, and may cause issues with data transfer."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/docs/core/",children:"Read more about the core here"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"weatherstack-edge",children:"WeatherStack Edge"}),"\n",(0,n.jsx)(t.p,{children:"This is the part of WeatherStack that actually collects the data from the sensors. This part is made up of another Raspberry Pi (or any other device that can run Linux),\nand 1 or more ESP32's that actually connect to the sensors to collect data.\nYou may wish to connect a camera to the Rasberry Pi (or any other device that can run Linux) to take photos of the sky at set intervals (Same as, or different to the data collection interval),\nand send them to the core for processing."}),"\n",(0,n.jsx)(t.p,{children:"If you would like to create timelapses of the sky, you may need to connect a camera to the server, and set it up to take photos at set intervals."}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"When selecting a device to run the edge software, it is recommended to use a Raspberry Pi 4 or higher, as it has Wi-Fi built in."})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/docs/edge/",children:"Read more about the edge here"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"weatherstack-frontend",children:"WeatherStack Frontend"}),"\n",(0,n.jsx)(t.p,{children:"This is what you will see most of the time. There are many different interfaces, such as the web interface, the mobile app, and the desktop app.\nThe web interface is the main interface, and is built using React, TypeScript, and Tailwind CSS."}),"\n",(0,n.jsx)(t.p,{children:"You can control most of the settings from the web interface, such as the data collection interval, the sensors that are connected, and the camera settings.\nYou can also view the data that has been collected, such as the temperature, humidity, pressure, and light levels."}),"\n",(0,n.jsx)(t.p,{children:"This allows you to view the data in real-time, and also allows you to download reports and timelapses of the data that has been collected.\nYou can schedule things to happen, like creating reports, making timelapses, and more."}),"\n",(0,n.jsx)(t.p,{children:"You may also make your data public (if you wish), so that others can view your data using the web interface."}),"\n",(0,n.jsx)(t.p,{children:"There is also a second desktop interface, which is built for making the software for the ESP32 edge devices, so you can easily select the sensors you want to use,\nand it will generate the code for you to upload to the ESP32. It will also tell you what pins to connect the sensors to, and how to wire them up."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/docs/frontend/",children:"Read more about the frontend here"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>i});var o=a(6540);const n={},r=o.createContext(n);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);